<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="about" xml:space="preserve">
    <value>Acerca De</value>
  </data>
  <data name="addDriver" xml:space="preserve">
    <value>Agregar Conductor</value>
  </data>
  <data name="backToList" xml:space="preserve">
    <value>Volver a la Lista</value>
  </data>
  <data name="city" xml:space="preserve">
    <value>Ciudad</value>
  </data>
  <data name="contact" xml:space="preserve">
    <value>Contacto</value>
  </data>
  <data name="create" xml:space="preserve">
    <value>Crear</value>
  </data>
  <data name="dateHired" xml:space="preserve">
    <value>Fecha de Contratación</value>
  </data>
  <data name="delete" xml:space="preserve">
    <value>Eliminar</value>
  </data>
  <data name="details" xml:space="preserve">
    <value>Detalles</value>
  </data>
  <data name="driverId" xml:space="preserve">
    <value>ID del Conductor</value>
  </data>
  <data name="driverList" xml:space="preserve">
    <value>Lista de Conductores</value>
  </data>
  <data name="drivers" xml:space="preserve">
    <value>Conductores</value>
  </data>
  <data name="edit" xml:space="preserve">
    <value>Editar</value>
  </data>
  <data name="firstName" xml:space="preserve">
    <value>Nombre</value>
  </data>
  <data name="fullName" xml:space="preserve">
    <value>Nombre Completo</value>
  </data>
  <data name="home" xml:space="preserve">
    <value>Inicio</value>
  </data>
  <data name="homePhone" xml:space="preserve">
    <value>Teléfono de Casa</value>
  </data>
  <data name="language" xml:space="preserve">
    <value>Lenguaje</value>
  </data>
  <data name="lastName" xml:space="preserve">
    <value>Apellido</value>
  </data>
  <data name="logIn" xml:space="preserve">
    <value>Ingreso</value>
  </data>
  <data name="postalCode" xml:space="preserve">
    <value>Código Postal</value>
  </data>
  <data name="provinceCode" xml:space="preserve">
    <value>Código de Provincia</value>
  </data>
  <data name="register" xml:space="preserve">
    <value>Registro</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>El campo {0} es obligatorio.</value>
  </data>
  <data name="routes" xml:space="preserve">
    <value>Rutas</value>
  </data>
  <data name="section" xml:space="preserve">
    <value>Sección</value>
  </data>
  <data name="stops" xml:space="preserve">
    <value>Paraderos</value>
  </data>
  <data name="street" xml:space="preserve">
    <value>Dirección</value>
  </data>
  <data name="workPhone" xml:space="preserve">
    <value>Teléfono de Trabajo</value>
  </data>
  <data name="ErrorValidatingProvinceCode" xml:space="preserve">
    <value>Error al validar el Código Postal: </value>
  </data>
  <data name="FieldMustBeDate" xml:space="preserve">
    <value>El campo {0} debe ser una fecha.</value>
  </data>
  <data name="FieldMustBeNumeric" xml:space="preserve">
    <value>El campo {0} debe ser un número.</value>
  </data>
  <data name="PhoneValidation" xml:space="preserve">
    <value>{0} no está en el formato canadiense válido: 123-123-1234.</value>
  </data>
  <data name="PostalCodeValidation" xml:space="preserve">
    <value>{0} no está en el formato canadiense válido: A3A 3A3.</value>
  </data>
  <data name="PropertyValueInvalid" xml:space="preserve">
    <value>El valor {0} no es válido para {1}.</value>
  </data>
  <data name="PropertyValueRequired" xml:space="preserve">
    <value>Un valor es obligatorio para {0}.</value>
  </data>
  <data name="provinceCodeDoesNotExist" xml:space="preserve">
    <value>El Código Postal no existe.</value>
  </data>
  <data name="provinceCodeMustBeTwoLettersLong" xml:space="preserve">
    <value>El Código Postal debe ser de dos caracteres.</value>
  </data>
  <data name="DateNotInFuture" xml:space="preserve">
    <value>{0} no puede ser posterior a la fecha actual.</value>
  </data>
  <data name="driverAdded" xml:space="preserve">
    <value>Conductor agregado.</value>
  </data>
  <data name="driverDeleted" xml:space="preserve">
    <value>Conductor eliminado.</value>
  </data>
  <data name="driverEdited" xml:space="preserve">
    <value>Conductor editado.</value>
  </data>
  <data name="exceptionOnAdd" xml:space="preserve">
    <value>Excepción en Agregar: </value>
  </data>
  <data name="exceptionOnDelete" xml:space="preserve">
    <value>Excepción en Eliminar: </value>
  </data>
  <data name="exceptionOnEdit" xml:space="preserve">
    <value>Excepción en Editar: </value>
  </data>
  <data name="AreYouSureYouWantToDeleteThis" xml:space="preserve">
    <value>¿Está seguro de que quiere eliminar este registro?</value>
  </data>
  <data name="editFor" xml:space="preserve">
    <value>Editar para </value>
  </data>
  <data name="save" xml:space="preserve">
    <value>Guardar</value>
  </data>
  <data name="provinceName" xml:space="preserve">
    <value>Provincia</value>
  </data>
  <data name="roleMaintenance" xml:space="preserve">
    <value>Mantenimiento de Roles</value>
  </data>
  <data name="security" xml:space="preserve">
    <value>Seguridad</value>
  </data>
  <data name="userMaintenance" xml:space="preserve">
    <value>Mantenimiento de Usuarios</value>
  </data>
</root>